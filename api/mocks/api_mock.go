// Code generated by MockGen. DO NOT EDIT.
// Source: api/api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"
	api "stock_ticker/api"

	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetAllPrices mocks base method.
func (m *MockAPI) GetAllPrices(ctx context.Context) (*api.JSONResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPrices", ctx)
	ret0, _ := ret[0].(*api.JSONResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPrices indicates an expected call of GetAllPrices.
func (mr *MockAPIMockRecorder) GetAllPrices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPrices", reflect.TypeOf((*MockAPI)(nil).GetAllPrices), ctx)
}

// GetPrices mocks base method.
func (m *MockAPI) GetPrices(ctx context.Context) (*api.OrderedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrices", ctx)
	ret0, _ := ret[0].(*api.OrderedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrices indicates an expected call of GetPrices.
func (mr *MockAPIMockRecorder) GetPrices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrices", reflect.TypeOf((*MockAPI)(nil).GetPrices), ctx)
}
